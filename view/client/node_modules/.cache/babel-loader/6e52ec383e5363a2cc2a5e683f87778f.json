{"ast":null,"code":"/**\n * A helper function to check if the id provided is valid.\n * @param {GridRowId} id Id as [[GridRowId]].\n * @param {GridRowModel | Partial<GridRowModel>} row Row as [[GridRowModel]].\n * @param {string} detailErrorMessage A custom error message to display for invalid IDs\n */\nexport function checkGridRowIdIsValid(id, row) {\n  let detailErrorMessage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'A row was provided without id in the rows prop:';\n\n  if (id == null) {\n    throw new Error(['MUI: The data grid component requires all rows to have a unique `id` property.', 'Alternatively, you can use the `getRowId` prop to specify a custom id for each row.', detailErrorMessage, JSON.stringify(row)].join('\\n'));\n  }\n}\nexport const getTreeNodeDescendants = (tree, parentId, skipAutoGeneratedRows) => {\n  var _tree$parentId;\n\n  const children = (_tree$parentId = tree[parentId]) == null ? void 0 : _tree$parentId.children;\n\n  if (children == null) {\n    return [];\n  }\n\n  const validDescendants = [];\n\n  for (let i = 0; i < children.length; i += 1) {\n    const child = children[i];\n    const childNode = tree[child];\n\n    if (!skipAutoGeneratedRows || !childNode.isAutoGenerated) {\n      validDescendants.push(child);\n    }\n\n    validDescendants.push(...getTreeNodeDescendants(tree, childNode.id, skipAutoGeneratedRows));\n  }\n\n  return validDescendants;\n};","map":{"version":3,"names":["checkGridRowIdIsValid","id","row","detailErrorMessage","Error","JSON","stringify","join","getTreeNodeDescendants","tree","parentId","skipAutoGeneratedRows","_tree$parentId","children","validDescendants","i","length","child","childNode","isAutoGenerated","push"],"sources":["/Users/deanfoster/Personal Budget/view/client/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsUtils.js"],"sourcesContent":["/**\n * A helper function to check if the id provided is valid.\n * @param {GridRowId} id Id as [[GridRowId]].\n * @param {GridRowModel | Partial<GridRowModel>} row Row as [[GridRowModel]].\n * @param {string} detailErrorMessage A custom error message to display for invalid IDs\n */\nexport function checkGridRowIdIsValid(id, row, detailErrorMessage = 'A row was provided without id in the rows prop:') {\n  if (id == null) {\n    throw new Error(['MUI: The data grid component requires all rows to have a unique `id` property.', 'Alternatively, you can use the `getRowId` prop to specify a custom id for each row.', detailErrorMessage, JSON.stringify(row)].join('\\n'));\n  }\n}\nexport const getTreeNodeDescendants = (tree, parentId, skipAutoGeneratedRows) => {\n  var _tree$parentId;\n\n  const children = (_tree$parentId = tree[parentId]) == null ? void 0 : _tree$parentId.children;\n\n  if (children == null) {\n    return [];\n  }\n\n  const validDescendants = [];\n\n  for (let i = 0; i < children.length; i += 1) {\n    const child = children[i];\n    const childNode = tree[child];\n\n    if (!skipAutoGeneratedRows || !childNode.isAutoGenerated) {\n      validDescendants.push(child);\n    }\n\n    validDescendants.push(...getTreeNodeDescendants(tree, childNode.id, skipAutoGeneratedRows));\n  }\n\n  return validDescendants;\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,qBAAT,CAA+BC,EAA/B,EAAmCC,GAAnC,EAAgH;EAAA,IAAxEC,kBAAwE,uEAAnD,iDAAmD;;EACrH,IAAIF,EAAE,IAAI,IAAV,EAAgB;IACd,MAAM,IAAIG,KAAJ,CAAU,CAAC,gFAAD,EAAmF,qFAAnF,EAA0KD,kBAA1K,EAA8LE,IAAI,CAACC,SAAL,CAAeJ,GAAf,CAA9L,EAAmNK,IAAnN,CAAwN,IAAxN,CAAV,CAAN;EACD;AACF;AACD,OAAO,MAAMC,sBAAsB,GAAG,CAACC,IAAD,EAAOC,QAAP,EAAiBC,qBAAjB,KAA2C;EAC/E,IAAIC,cAAJ;;EAEA,MAAMC,QAAQ,GAAG,CAACD,cAAc,GAAGH,IAAI,CAACC,QAAD,CAAtB,KAAqC,IAArC,GAA4C,KAAK,CAAjD,GAAqDE,cAAc,CAACC,QAArF;;EAEA,IAAIA,QAAQ,IAAI,IAAhB,EAAsB;IACpB,OAAO,EAAP;EACD;;EAED,MAAMC,gBAAgB,GAAG,EAAzB;;EAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAAQ,CAACG,MAA7B,EAAqCD,CAAC,IAAI,CAA1C,EAA6C;IAC3C,MAAME,KAAK,GAAGJ,QAAQ,CAACE,CAAD,CAAtB;IACA,MAAMG,SAAS,GAAGT,IAAI,CAACQ,KAAD,CAAtB;;IAEA,IAAI,CAACN,qBAAD,IAA0B,CAACO,SAAS,CAACC,eAAzC,EAA0D;MACxDL,gBAAgB,CAACM,IAAjB,CAAsBH,KAAtB;IACD;;IAEDH,gBAAgB,CAACM,IAAjB,CAAsB,GAAGZ,sBAAsB,CAACC,IAAD,EAAOS,SAAS,CAACjB,EAAjB,EAAqBU,qBAArB,CAA/C;EACD;;EAED,OAAOG,gBAAP;AACD,CAvBM"},"metadata":{},"sourceType":"module"}