{"ast":null,"code":"var _jsxFileName = \"/Users/deanfoster/Personal Budget/view/client/src/Components/Envelopes.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport axios from 'axios';\nimport Table from './Table'; // Custom component to render Genres \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Genres = _ref => {\n  let {\n    values\n  } = _ref;\n  // Loop through the array and create a badge-like component instead of a comma-separated string\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: values.map((genre, idx) => {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"badge\",\n        children: genre\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 13\n      }, this);\n    })\n  }, void 0, false);\n};\n\n_c = Genres;\n\nfunction Envelopes() {\n  _s();\n\n  // data state to store the TV Maze API data. Its initial value is an empty array\n  const [data, setData] = useState([]); // Using useEffect to call the API once mounted and set the data\n\n  useEffect(() => {\n    (async () => {\n      const result = await axios(\"https://api.tvmaze.com/search/shows?q=snow\");\n      setData(result.data);\n    })();\n  }, []);\n  const columns = useMemo(() => [{\n    // first group - TV Show\n    Header: \"TV Show\",\n    // First group columns\n    columns: [{\n      Header: \"Name\",\n      accessor: \"show.name\"\n    }, {\n      Header: \"Type\",\n      accessor: \"show.type\"\n    }]\n  }, {\n    // Second group - Details\n    Header: \"Details\",\n    // Second group columns\n    columns: [{\n      Header: \"Language\",\n      accessor: \"show.language\"\n    }, {\n      Header: \"Genre(s)\",\n      accessor: \"show.genres\"\n    }, {\n      Header: \"Runtime\",\n      accessor: \"show.runtime\"\n    }, {\n      Header: \"Status\",\n      accessor: \"show.status\"\n    }]\n  }], []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      columns: columns,\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Envelopes, \"WraXYNH1W1loa0Y6z20i0MNWuRQ=\");\n\n_c2 = Envelopes;\nexport default Envelopes;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Genres\");\n$RefreshReg$(_c2, \"Envelopes\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","axios","Table","Genres","values","map","genre","idx","Envelopes","data","setData","result","columns","Header","accessor"],"sources":["/Users/deanfoster/Personal Budget/view/client/src/Components/Envelopes.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\nimport axios from 'axios';\nimport Table from './Table';\n\n\n// Custom component to render Genres \nconst Genres = ({ values }) => {\n    // Loop through the array and create a badge-like component instead of a comma-separated string\n    return (\n      <>\n        {values.map((genre, idx) => {\n          return (\n            <span key={idx} className=\"badge\">\n              {genre}\n            </span>\n          );\n        })}\n      </>\n    );\n  };\n\nfunction Envelopes() {\n  // data state to store the TV Maze API data. Its initial value is an empty array\n  const [data, setData] = useState([]);\n\n  // Using useEffect to call the API once mounted and set the data\n  useEffect(() => {\n    (async () => {\n      const result = await axios(\"https://api.tvmaze.com/search/shows?q=snow\");\n      setData(result.data);\n    })();\n  }, []);\n\n  const columns = useMemo(\n    () => [\n      {\n        // first group - TV Show\n        Header: \"TV Show\",\n        // First group columns\n        columns: [\n          {\n            Header: \"Name\",\n            accessor: \"show.name\"\n          },\n          {\n            Header: \"Type\",\n            accessor: \"show.type\"\n          }\n        ]\n      },\n      {\n        // Second group - Details\n        Header: \"Details\",\n        // Second group columns\n        columns: [\n          {\n            Header: \"Language\",\n            accessor: \"show.language\"\n          },\n          {\n            Header: \"Genre(s)\",\n            accessor: \"show.genres\",\n            \n          },\n          {\n            Header: \"Runtime\",\n            accessor: \"show.runtime\"\n          },\n          {\n            Header: \"Status\",\n            accessor: \"show.status\"\n          }\n        ]\n      }\n    ],\n    []\n  );\n\n  return (\n    <div>\n        <Table columns={columns} data={data} />\n    </div>\n  );\n}\n\nexport default Envelopes;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,OAArC,QAAoD,OAApD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB,C,CAGA;;;;;AACA,MAAMC,MAAM,GAAG,QAAgB;EAAA,IAAf;IAAEC;EAAF,CAAe;EAC3B;EACA,oBACE;IAAA,UACGA,MAAM,CAACC,GAAP,CAAW,CAACC,KAAD,EAAQC,GAAR,KAAgB;MAC1B,oBACE;QAAgB,SAAS,EAAC,OAA1B;QAAA,UACGD;MADH,GAAWC,GAAX;QAAA;QAAA;QAAA;MAAA,QADF;IAKD,CANA;EADH,iBADF;AAWD,CAbH;;KAAMJ,M;;AAeN,SAASK,SAAT,GAAqB;EAAA;;EACnB;EACA,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,EAAD,CAAhC,CAFmB,CAInB;;EACAC,SAAS,CAAC,MAAM;IACd,CAAC,YAAY;MACX,MAAMY,MAAM,GAAG,MAAMV,KAAK,CAAC,4CAAD,CAA1B;MACAS,OAAO,CAACC,MAAM,CAACF,IAAR,CAAP;IACD,CAHD;EAID,CALQ,EAKN,EALM,CAAT;EAOA,MAAMG,OAAO,GAAGZ,OAAO,CACrB,MAAM,CACJ;IACE;IACAa,MAAM,EAAE,SAFV;IAGE;IACAD,OAAO,EAAE,CACP;MACEC,MAAM,EAAE,MADV;MAEEC,QAAQ,EAAE;IAFZ,CADO,EAKP;MACED,MAAM,EAAE,MADV;MAEEC,QAAQ,EAAE;IAFZ,CALO;EAJX,CADI,EAgBJ;IACE;IACAD,MAAM,EAAE,SAFV;IAGE;IACAD,OAAO,EAAE,CACP;MACEC,MAAM,EAAE,UADV;MAEEC,QAAQ,EAAE;IAFZ,CADO,EAKP;MACED,MAAM,EAAE,UADV;MAEEC,QAAQ,EAAE;IAFZ,CALO,EAUP;MACED,MAAM,EAAE,SADV;MAEEC,QAAQ,EAAE;IAFZ,CAVO,EAcP;MACED,MAAM,EAAE,QADV;MAEEC,QAAQ,EAAE;IAFZ,CAdO;EAJX,CAhBI,CADe,EA0CrB,EA1CqB,CAAvB;EA6CA,oBACE;IAAA,uBACI,QAAC,KAAD;MAAO,OAAO,EAAEF,OAAhB;MAAyB,IAAI,EAAEH;IAA/B;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA,QADF;AAKD;;GA9DQD,S;;MAAAA,S;AAgET,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}