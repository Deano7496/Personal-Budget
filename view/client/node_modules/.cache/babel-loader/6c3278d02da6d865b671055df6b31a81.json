{"ast":null,"code":"var _jsxFileName = \"/Users/deanfoster/Personal Budget/view/client/src/Components/Table.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useFilters, useTable } from \"react-table\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Table(_ref) {\n  _s();\n\n  let {\n    columns,\n    data\n  } = _ref;\n  const [filterInput, setFilterInput] = useState(\"\");\n\n  const handleFilterChange = e => {\n    const value = e.target.value || undefined;\n    setFilter(\"show.name\", value); // Update the show.name filter. Now our table will filter and show only the rows which have a matching value\n\n    setFilterInput(value);\n  };\n\n  /*#__PURE__*/\n  _jsxDEV(\"input\", {\n    value: filterInput,\n    onChange: handleFilterChange,\n    placeholder: \"Search name\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 3\n  }, this);\n\n  const {\n    getTableProps,\n    // table props from react-table\n    getTableBodyProps,\n    // table body props from react-table\n    headerGroups,\n    // headerGroups, if your table has groupings\n    rows,\n    // rows for the table based on the data passed\n    prepareRow,\n    // Prepare the row (this function needs to be called for each row before getting the row props)\n    setFilter\n  } = useTable({\n    columns,\n    data\n  }, useFilters, useSortBy);\n  return /*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n        children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n          children: column.render(\"Header\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n      children: rows.map((row, i) => {\n        prepareRow(row);\n        return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n          children: row.cells.map(cell => {\n            return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n              children: cell.render(\"Cell\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 22\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Table, \"aZlkRBTpJ3D0GV7zHuqce8/+gYQ=\", false, function () {\n  return [useTable];\n});\n\n_c = Table;\nexport default Table;\n\nvar _c;\n\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","useState","useFilters","useTable","Table","columns","data","filterInput","setFilterInput","handleFilterChange","e","value","target","undefined","setFilter","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","useSortBy","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps"],"sources":["/Users/deanfoster/Personal Budget/view/client/src/Components/Table.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useFilters, useTable } from \"react-table\";\n\nfunction Table({columns, data}) {\n\n  const [filterInput, setFilterInput] = useState(\"\");\n\n  const handleFilterChange = e => {\n    const value = e.target.value || undefined;\n    setFilter(\"show.name\", value); // Update the show.name filter. Now our table will filter and show only the rows which have a matching value\n    setFilterInput(value);\n  };\n\n  <input\n  value={filterInput}\n  onChange={handleFilterChange}\n  placeholder={\"Search name\"}\n/>\n\n\n  const {\n    getTableProps, // table props from react-table\n    getTableBodyProps, // table body props from react-table\n    headerGroups, // headerGroups, if your table has groupings\n    rows, // rows for the table based on the data passed\n    prepareRow, // Prepare the row (this function needs to be called for each row before getting the row props)\n    setFilter\n  } = useTable({\n    columns,\n    data\n  },\n  useFilters,\n  useSortBy\n  );\n\n  return (\n    <table {...getTableProps()}>\n    <thead>\n      {headerGroups.map(headerGroup => (\n        <tr {...headerGroup.getHeaderGroupProps()}>\n          {headerGroup.headers.map(column => (\n            <th {...column.getHeaderProps()}>{column.render(\"Header\")}</th>\n          ))}\n        </tr>\n      ))}\n    </thead>\n    <tbody {...getTableBodyProps()}>\n      {rows.map((row, i) => {\n        prepareRow(row);\n        return (\n          <tr {...row.getRowProps()}>\n            {row.cells.map(cell => {\n              return <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>;\n            })}\n          </tr>\n        );\n      })}\n    </tbody>\n  </table>\n);\n}\n\nexport default Table;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,aAArC;;;AAEA,SAASC,KAAT,OAAgC;EAAA;;EAAA,IAAjB;IAACC,OAAD;IAAUC;EAAV,CAAiB;EAE9B,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,EAAD,CAA9C;;EAEA,MAAMQ,kBAAkB,GAAGC,CAAC,IAAI;IAC9B,MAAMC,KAAK,GAAGD,CAAC,CAACE,MAAF,CAASD,KAAT,IAAkBE,SAAhC;IACAC,SAAS,CAAC,WAAD,EAAcH,KAAd,CAAT,CAF8B,CAEC;;IAC/BH,cAAc,CAACG,KAAD,CAAd;EACD,CAJD;;EAMA;EAAA;IACA,KAAK,EAAEJ,WADP;IAEA,QAAQ,EAAEE,kBAFV;IAGA,WAAW,EAAE;EAHb;IAAA;IAAA;IAAA;EAAA;;EAOA,MAAM;IACJM,aADI;IACW;IACfC,iBAFI;IAEe;IACnBC,YAHI;IAGU;IACdC,IAJI;IAIE;IACNC,UALI;IAKQ;IACZL;EANI,IAOFX,QAAQ,CAAC;IACXE,OADW;IAEXC;EAFW,CAAD,EAIZJ,UAJY,EAKZkB,SALY,CAPZ;EAeA,oBACE,sBAAWL,aAAa,EAAxB;IAAA,wBACA;MAAA,UACGE,YAAY,CAACI,GAAb,CAAiBC,WAAW,iBAC3B,mBAAQA,WAAW,CAACC,mBAAZ,EAAR;QAAA,UACGD,WAAW,CAACE,OAAZ,CAAoBH,GAApB,CAAwBI,MAAM,iBAC7B,mBAAQA,MAAM,CAACC,cAAP,EAAR;UAAA,UAAkCD,MAAM,CAACE,MAAP,CAAc,QAAd;QAAlC;UAAA;UAAA;UAAA;QAAA,QADD;MADH;QAAA;QAAA;QAAA;MAAA,QADD;IADH;MAAA;MAAA;MAAA;IAAA,QADA,eAUA,sBAAWX,iBAAiB,EAA5B;MAAA,UACGE,IAAI,CAACG,GAAL,CAAS,CAACO,GAAD,EAAMC,CAAN,KAAY;QACpBV,UAAU,CAACS,GAAD,CAAV;QACA,oBACE,mBAAQA,GAAG,CAACE,WAAJ,EAAR;UAAA,UACGF,GAAG,CAACG,KAAJ,CAAUV,GAAV,CAAcW,IAAI,IAAI;YACrB,oBAAO,mBAAQA,IAAI,CAACC,YAAL,EAAR;cAAA,UAA8BD,IAAI,CAACL,MAAL,CAAY,MAAZ;YAA9B;cAAA;cAAA;cAAA;YAAA,QAAP;UACD,CAFA;QADH;UAAA;UAAA;UAAA;QAAA,QADF;MAOD,CATA;IADH;MAAA;MAAA;MAAA;IAAA,QAVA;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAyBD;;GAzDQvB,K;UAwBHD,Q;;;KAxBGC,K;AA2DT,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}